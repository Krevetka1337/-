import pygame
import random
import time
import sys

# инициализация Pygame
pygame.init()

# размеры экрана
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# цвета
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# создание окна игры
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("ловля яиц")

# загрузка изображений
player_img = pygame.image.load("box.png")
# player_img.set_colorkey(player_img.get_at((0, 0)))
# player_img.set_colorkey(player_img.get_at((0, 30)))
player_img = player_img.convert_alpha()


obstacle_img = pygame.image.load("egg.png")
obstacle_img.set_colorkey(obstacle_img.get_at((0, 0)))
obstacle_img.convert_alpha()


background_img = pygame.image.load("ambar.png").convert()

# изменение размеров изображений
player_img = pygame.transform.scale(player_img, (50, 50))
obstacle_img = pygame.transform.scale(obstacle_img, (70, 50))
background_img = pygame.transform.scale(background_img, (SCREEN_WIDTH, SCREEN_HEIGHT))


# класс игрока
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = player_img
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH // 2
        self.rect.bottom = SCREEN_HEIGHT - 10
        self.speed = 0
        self.angle = 0
        self.shift_count = 0
        self.shift_blocked_time = None
        self.font = pygame.font.Font(None, 30)

    def update(self):
        self.move()
        self.draw_timer()

    def move(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_a] and self.rect.left > 0:
            self.rect.x -= 5 + (5 if keys[pygame.K_LSHIFT] and not self.shift_blocked() else 0)
        elif keys[pygame.K_d] and self.rect.right < SCREEN_WIDTH:
            self.rect.x += 5 + (5 if keys[pygame.K_LSHIFT] and not self.shift_blocked() else 0)
        if keys[pygame.K_w] and self.rect.top > 0:
            self.rect.y -= 5 + (5 if keys[pygame.K_LSHIFT] and not self.shift_blocked() else 0)
        elif keys[pygame.K_s] and self.rect.bottom < SCREEN_HEIGHT:
            self.rect.y += 5 + (5 if keys[pygame.K_LSHIFT] and not self.shift_blocked() else 0)

        if keys[pygame.K_LSHIFT]:
            self.shift_count += 1
            if self.shift_count > 5:
                self.block_shift()

    def block_shift(self):
        self.shift_blocked_time = pygame.time.get_ticks() + 10000  # блокируем на 5 секунд

    def shift_blocked(self):
        if self.shift_blocked_time is not None and pygame.time.get_ticks() < self.shift_blocked_time:
            return True
        else:
            self.shift_blocked_time = None
            self.shift_count = 0
            return False

    def draw_timer(self):
        if self.shift_blocked():
            time_left = int(60 - (time.time() - self.shift_blocked_time))
            timer_text = self.font.render(f"SHIFT BLOCKED: {time_left}", True, WHITE)
            timer_rect = timer_text.get_rect()
            timer_rect.topright = (SCREEN_WIDTH - 10, 10)
            screen.blit(timer_text, timer_rect)


class MainMenu:
    def __init__(self):
        self.difficulty = 1  # по умолчанию сложность - 1 (легкий уровень)
        pygame.init()
        self.screen = pygame.display.set_mode((800, 600))
        self.font = pygame.font.Font(None, 36)
        self.background = pygame.image.load("background.png").convert()

    def draw_menu(self):
        self.screen.blit(self.background, (0, 0))
        text = self.font.render("Выберите уровень сложности:", True, (0, 0, 0))
        self.screen.blit(text, (250, 200))
        easy_button = pygame.Rect(300, 250, 200, 50)
        medium_button = pygame.Rect(300, 320, 200, 50)
        hard_button = pygame.Rect(300, 390, 200, 50)
        pygame.draw.rect(self.screen, (0, 255, 0), easy_button)
        pygame.draw.rect(self.screen, (255, 255, 0), medium_button)
        pygame.draw.rect(self.screen, (255, 0, 0), hard_button)
        text = self.font.render("Easy", True, (0, 0, 0))
        self.screen.blit(text, (365, 260))
        text = self.font.render("Medium", True, (0, 0, 0))
        self.screen.blit(text, (350, 330))
        text = self.font.render("Hard", True, (0, 0, 0))
        self.screen.blit(text, (365, 400))
        pygame.display.flip()

        # обработка событий
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_pos = pygame.mouse.get_pos()
                    if easy_button.collidepoint(mouse_pos):
                        self.difficulty = 1
                        return
                    elif medium_button.collidepoint(mouse_pos):
                        self.difficulty = 2
                        return
                    elif hard_button.collidepoint(mouse_pos):
                        self.difficulty = 3
                        return

    def select_difficulty(self, difficulty):
        self.difficulty = difficulty

    def start_game(self):
        game = RacingGame(self.difficulty)  # создание объекта игры с выбранной сложностью
        game.run()


# класс препятствия
class Obstacle(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = obstacle_img
        self.rect = self.image.get_rect()
        self.rect.centerx = random.randint(0, SCREEN_WIDTH)
        self.rect.y = -100

    def update(self):
        self.rect.y += 5
        if self.rect.y > SCREEN_HEIGHT:
            self.kill()


class RacingGame:
    def __init__(self, difficulty):
        self.clock = pygame.time.Clock()
        self.missed_obstacles = 0
        self.score = 0
        self.font = pygame.font.SysFont(None, 30)
        self.obstacle_timer = 0
        self.all_sprites = pygame.sprite.Group()
        self.obstacles = pygame.sprite.Group()
        self.player = Player()
        self.all_sprites.add(self.player)
        self.lost = False
        self.difficulty = difficulty
        self.score = 0
        self.level = 1

    def reset(self):
        # сброс уровня и других параметров игры
        self.score = 0
        self.level = 1
        print("Сброс уровня...")

    def run(self):
        self.reset()  # добавляем сброс параметров при запуске игры
        running = True
        while running:
            # обработка событий
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
            self.update()

            # отрисовка экрана
            screen.blit(background_img, (0, 0))
            self.all_sprites.draw(screen)
            text = self.font.render("Score: {}".format(self.score), True, WHITE)
            screen.blit(text, (10, 10))
            text = self.font.render("Missed eggs: {}".format(self.missed_obstacles), True, WHITE)
            screen.blit(text, (10, 40))
            pygame.display.flip()

            # проверка на проигрыш
            if self.lost:
                self.reset()  # вызываем метод reset() при проигрыше

            # проверка на превышение лимита пропущенных спрайтов
            if self.missed_obstacles == 5:
                self.reset()

            # задержка для 60 FPS
            self.clock.tick(60)

        pygame.quit()

    def update_score(self, points):
        self.score += points

    def next_level(self):
        self.level += 1

    def update(self):
        self.all_sprites.update()
        self.spawn_obstacle()
        self.check_collision()
        self.check_lost()

    def spawn_obstacle(self):
        self.obstacle_timer += 1
        if self.obstacle_timer == 60:
            self.obstacle_timer = 0
            obstacle = Obstacle()
            self.all_sprites.add(obstacle)
            self.obstacles.add(obstacle)

    def check_collision(self):
        for obstacle in pygame.sprite.spritecollide(self.player, self.obstacles, True):
            self.score += 1

    def check_lost(self):
        for obstacle in self.obstacles:
            if obstacle.rect.right <= 0:
                self.missed_obstacles += 1
                obstacle.kill()
            elif obstacle.rect.bottom >= SCREEN_HEIGHT:
                self.missed_obstacles += 1
                obstacle.kill()

    def reset(self):
        self.score = 0
        self.missed_obstacles = 0
        self.obstacle_timer = 0
        self.all_sprites.empty()
        self.obstacles.empty()
        self.player = Player()
        self.all_sprites.add(self.player)
        self.lost = False


main_menu = MainMenu()
main_menu.draw_menu()


class EasyDifficulty(RacingGame):
    def __init__(self):
        super().__init__("Easy")
        self.obstacle_timer = 0
        self.spawn_rate = 120  # Спрайты спавнятся в 2 раза реже
        self.player_speed_multiplier = 2  # Скорость игрока ускорена в 2 раза

    def spawn_obstacle(self):
        self.obstacle_timer += 1
        if self.obstacle_timer == self.spawn_rate:
            self.obstacle_timer = 0
            obstacle = Obstacle()
            self.all_sprites.add(obstacle)
            self.obstacles.add(obstacle)


class MediumDifficulty(RacingGame):
    def __init__(self):
        super().__init__("Medium")
        self.obstacle_timer = 0
        self.spawn_rate = 90  # Спрайты спавнятся чаще, чем в EasyDifficulty
        self.player_speed_multiplier = 1.5  # Скорость игрока ускорена в 1.5 раза

    def spawn_obstacle(self):
        self.obstacle_timer += 1
        if self.obstacle_timer == self.spawn_rate:
            self.obstacle_timer = 0
            obstacle = Obstacle()
            self.all_sprites.add(obstacle)
            self.obstacles.add(obstacle)


class HardDifficulty(RacingGame):
    def __init__(self):
        super().__init__("Hard")
        self.spawn_rate = 15  # Спрайты спавнятся в два раза чаще, чем в MediumDifficulty
        self.player_speed_multiplier = 1
        self.obstacle_timer = 0

    def spawn_obstacle(self):
        self.obstacle_timer += 5
        if self.obstacle_timer == self.spawn_rate:
            self.obstacle_timer = 0
            obstacle = Obstacle()
            self.all_sprites.add(obstacle)
            self.obstacles.add(obstacle)


game = RacingGame(difficulty=3)
game.run()
pygame.quit()
